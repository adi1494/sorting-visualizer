{"version":3,"sources":["SortingAlgorithms/SortingAlogrithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","lo","hi","mid","Math","floor","i","j","k","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOne","barTwo","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","n","sorted","temp","bubbleSortHelper","getBubbleSortAnimations","console","log","bar1","height1","bar2","height2","className","onClick","mergeSort","quickSort","heapSort","bubbleSort","map","value","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.59cc1e45.chunk.js","sourcesContent":["// export const mergeSort = array => {\r\n//     if (array.length === 1) return array;\r\n//     const mid = Math.floor(array.length / 2);\r\n//     const left = mergeSort(array.slice(0,mid));\r\n//     const right = mergeSort(array.slice(mid));\r\n    \r\n//     const sortedArray = [];\r\n//     let i = 0, j = 0;\r\n//     while (i < left.length && j < right.length){\r\n//         if (left[i] < right[j]){\r\n//             sortedArray.push(left[i++]);\r\n//         } else {\r\n//             sortedArray.push(right[j++]);\r\n//         }\r\n//     }\r\n\r\n//     while (i < left.length) sortedArray.push(left[i++]);\r\n//     while (j < right.length) sortedArray.push(right[j++]);\r\n\r\n//     return sortedArray;\r\n// }\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper (\r\n    mainArray,\r\n    lo,\r\n    hi,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (lo === hi) return;\r\n    const mid = Math.floor((lo + hi)/2);\r\n    mergeSortHelper(auxiliaryArray, lo, mid, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, mid+1, hi, mainArray, animations);\r\n    doMerge(mainArray, lo, mid, hi, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    lo,\r\n    mid,\r\n    hi,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    // let n1 = mid+1-lo, n2 = hi-mid;\r\n    // const leftarr = [];\r\n    // const rightarr = [];\r\n    // for (let i = 0; i < n1; i++) {\r\n    //     leftarr.push(mainArray[i]);\r\n    // }\r\n    // for (let i = 0; i < n1; i++) {\r\n    //     rightarr.push(mainArray[mid+1+j]);\r\n    // }\r\n\r\n    // let i = 0, j = mid+1, k = lo;\r\n    // while (i < n1 && j < n2){\r\n    //     if (leftarr[i] <= rightarr[j]){\r\n    //         mainArray[k++] = leftarr[i++];\r\n    //     } else {\r\n    //         mainArray[k++] = rightarr[j++];\r\n    //     }\r\n    // }\r\n    // while (i < n1){\r\n    //     mainArray[k++] = leftarr[i++];\r\n    // }\r\n    // while (j < n2){\r\n    //     mainArray[k++] = rightarr[j++];\r\n    // }\r\n\r\n    let i = lo, j = mid+1, k = lo;\r\n\r\n    while (i <= mid && j <= hi){\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= mid){\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= hi){\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // const auxiliaryArray = array.slice();\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper (mainArray, animations){\r\n    const n = mainArray.length;\r\n    // for (let i = 0; i < n; i++){\r\n    //     for (let j = 0; j < n-i-1; j++){\r\n    //         if (mainArray[j] > mainArray[j+1]){\r\n    //             // animations.push([j, j+1]);\r\n    //             // animations.push([j, j+1]);\r\n    //             // animations.push([j, mainArray[j]]);\r\n    //             const temp = mainArray[j];\r\n    //             mainArray[j] = mainArray[j+1];\r\n    //             mainArray[j+1] = temp;\r\n    //         }\r\n    //     }\r\n    // }\r\n    let sorted = false;\r\n    while (!sorted){\r\n        sorted = true;\r\n        // let max = n-2;\r\n        for (let i = 0; i < n-1; i++){\r\n            // console.log(mainArray[i], mainArray[i+1]);\r\n            if(mainArray[i] > mainArray[i+1]){\r\n                sorted = false;\r\n                animations.push([i, i+1]);\r\n                animations.push([i, i+1]);\r\n                animations.push([i, mainArray[i], i+1, mainArray[i+1]]);\r\n                const temp = mainArray[i];\r\n                mainArray[i] = mainArray[i+1];\r\n                mainArray[i+1] = temp;\r\n                // console.log(mainArray[i], mainArray[i+1], temp);\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations, getBubbleSortAnimations} from '../SortingAlgorithms/SortingAlogrithms';\r\n// import { array } from 'prop-types';\r\n\r\n\r\nconst ARRAY_SIZE = 300;\r\nconst SORTING_SPEED = 2;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < ARRAY_SIZE; i++){\r\n            array.push(randomNumberBetween(10,500));\r\n        }\r\n        // console.log(this.state.array);\r\n        this.setState({array});\r\n        // console.log(this.state.array);\r\n    }\r\n\r\n    mergeSort() {\r\n        // console.log(this.state.array);\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        // console.log(this.state.array);\r\n        // console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange){\r\n                const [barOne, barTwo] = animations[i];\r\n                const barOneStyle = arrayBars[barOne].style;\r\n                const barTwoStyle = arrayBars[barTwo].style;\r\n                const color = i % 3 === 0 ? 'red' : 'blue';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * SORTING_SPEED);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOne, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOne].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * SORTING_SPEED);\r\n            }\r\n        }\r\n        \r\n        // console.log(this.state.array);\r\n    }\r\n\r\n    quickSort() {\r\n        \r\n    }\r\n\r\n    heapSort() {\r\n\r\n    }\r\n\r\n    bubbleSort() {\r\n        // console.log(this.state.array);\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        // console.log(this.state.array);\r\n        console.log(animations);\r\n\r\n        // let lastindex = animations.length-1;\r\n        for (let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3  !== 2;\r\n            if (isColorChange){\r\n                const [barOne, barTwo] = animations[i];\r\n                const barOneStyle = arrayBars[barOne].style;\r\n                const barTwoStyle = arrayBars[barTwo].style;\r\n                const color = i % 3 === 0 ? 'red' : 'blue';\r\n                // const color = 'red';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * 3);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [bar1, height1, bar2, height2] = animations[i];\r\n                    const barOneStyle = arrayBars[bar1].style;\r\n                    barOneStyle.height = `${height2}px`;\r\n                    // barOneStyle.backgroundColor = 'blue';\r\n                    const barTwoStyle = arrayBars[bar2].style;\r\n                    barTwoStyle.height = `${height1}px`;\r\n                    // barTwoStyle.backgroundColor = 'blue';\r\n                }, i * 3);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    // testSortingAlgorithms() {\r\n    //     for (let i = 0; i < 100; i++){\r\n    //         const array = [];\r\n    //         const length = randomNumberBetween(1, 1000);\r\n    //         for (let j = 0; j < length; j++){\r\n    //             array.push(randomNumberBetween(0, 1000));\r\n    //         }\r\n    //         const jsSortedArray = array.slice().sort((a,b) => a - b);\r\n    //         const sortedArray = SortingAlgorithms.mergeSort(array);\r\n    //         console.log(arrayEqual(sortedArray, jsSortedArray));\r\n    //     }\r\n    // }\r\n\r\n    render () {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">            \r\n                \r\n                <div className=\"button-container\">\r\n                    <button className=\"button\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className=\"button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"button\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button className=\"button\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button className=\"button\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    {/* <button className=\"button\" onClick={() => this.testSortingAlgorithms()}>Test Sorting Algorithm</button> */}\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div \r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                height: `${value}px`,\r\n                                backgroundColor: 'blue',\r\n                        }}>\r\n                            \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomNumberBetween(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arrayEqual(array, jsarray){\r\n//     if (array.length !== jsarray.length) return false;\r\n//     for (let i = 0; i < array.length; i++){\r\n//         if (array[i] !== jsarray[i]) return false;\r\n//     }\r\n//     return true;\r\n// }\r\n\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}