{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/quickSort.js","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/insertionSort.js","SortingAlgorithms/selectionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSort","array","animations","length","mergeSortHelper","getMergeSortAnimations","i","arrayBars","document","getElementsByClassName","l","k","lobar","midbar","hibar","setTimeout","style","backgroundColor","bar","height","lo","hi","mid","Math","floor","len1","len2","push","left","right","j","merge","getQuickSort","quickSortHelper","getQuickSortAnimations","bar1","bar2","bar1style","bar2style","pi","pivot","quickSortPartition","getBubbleSort","n","bubbleSortHelper","getBubbleSortAnimations","idx","getInsertionSort","key","insertionSort","getInsertionSortAnimations","getSelectionSort","minIdx","selectionSortHelper","getSelectionSortAnimations","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","className","onClick","mergeSort","quickSort","bubbleSort","selectionSort","map","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e9bb9ef1.chunk.js","sourcesContent":["const SORT_SPEED = 3;\r\n\r\nexport function getMergeSort(array) {\r\n    // console.log(this.state.array);\r\n    const animations = getMergeSortAnimations(array);\r\n    // console.log(this.state.array);\r\n    // console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        let l = animations[i].length;\r\n        if (l === 4) {\r\n            // color boundaries\r\n            const [k, lobar, midbar, hibar] = animations[i];\r\n            if (k === 0) {\r\n                // console.log('coloring');\r\n                setTimeout(() => {\r\n                    arrayBars[lobar].style.backgroundColor = 'red';\r\n                    arrayBars[hibar].style.backgroundColor = 'red';\r\n                    arrayBars[midbar].style.backgroundColor = 'blue';\r\n                }, i * SORT_SPEED);\r\n            } else if (k === 1) {\r\n                // console.log('uncoloring');\r\n                setTimeout(() => {\r\n                    arrayBars[lobar].style.backgroundColor = 'grey';\r\n                    arrayBars[hibar].style.backgroundColor = 'grey';\r\n                    arrayBars[midbar].style.backgroundColor = 'grey';\r\n                }, i * SORT_SPEED);\r\n            }\r\n        } else if (l === 3) {\r\n            // set bar height\r\n            const [k, bar, height] = animations[i];\r\n            if (k === 2) {\r\n                setTimeout(() => {\r\n                    arrayBars[bar].style.height = `${height}px`;\r\n                }, i * SORT_SPEED);\r\n            }\r\n        } else {\r\n            // set bar color\r\n            const [k, bar] = animations[i];\r\n            if (k === 0) {\r\n                setTimeout(() => {\r\n                    arrayBars[bar].style.backgroundColor = 'yellow';\r\n                }, (i-1) * SORT_SPEED);\r\n            } else {\r\n                setTimeout(() => {\r\n                    arrayBars[bar].style.backgroundColor = 'grey';\r\n                }, i * SORT_SPEED);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    mergeSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations,\r\n) {\r\n    if (lo >= hi) return;\r\n    const mid = Math.floor((lo + hi) / 2);\r\n    mergeSortHelper(array, lo, mid, animations);\r\n    mergeSortHelper(array, mid + 1, hi, animations);\r\n    merge(array, lo, mid, hi, animations);\r\n}\r\n\r\n// my implementation\r\nfunction merge(\r\n    array,\r\n    lo,\r\n    mid,\r\n    hi,\r\n    animations,\r\n) {\r\n    let len1 = mid + 1 - lo, len2 = hi - mid;\r\n    animations.push([0, lo, mid, hi]) // color boundaries\r\n    const left = [], right = [];\r\n    for (let i = 0; i < len1; i++) {\r\n        left.push(array[lo + i]);\r\n        animations.push([0, lo + i]); // color reading elements\r\n        animations.push([1, lo + i]); // uncolor reading elements\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n    }\r\n    for (let j = 0; j < len2; j++) {\r\n        right.push(array[mid + 1 + j]);\r\n        animations.push([0, mid + 1 + j]); // color reading elements\r\n        animations.push([1, mid + 1 + j]); // uncolor reading elements\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n    }\r\n    let i = 0, j = 0, k = lo;\r\n    while (i < len1 && j < len2) {\r\n        if (left[i] <= right[j]) {\r\n            animations.push([3, k]); // color setheight\r\n            animations.push([2, k, left[i]]); // setheight\r\n            animations.push([4, k]); // uncolor setheight\r\n            animations.push([0, lo, mid, hi]) // color boundaries\r\n            array[k++] = left[i++];\r\n        } else {\r\n            animations.push([3, k]); // color setheight\r\n            animations.push([2, k, right[j]]); // setheight\r\n            animations.push([4, k]); // uncolor setheight\r\n            animations.push([0, lo, mid, hi]) // color boundaries\r\n            array[k++] = right[j++];\r\n        }\r\n    }\r\n    while (i < len1) {\r\n        animations.push([3, k]); // color setheight\r\n        animations.push([2, k, left[i]]); // setheight\r\n        animations.push([4, k]); // uncolor setheight\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n        array[k++] = left[i++];\r\n    }\r\n    while (j < len2) {\r\n        animations.push([3, k]); // color setheight\r\n        animations.push([2, k, right[j]]); // setheight\r\n        animations.push([4, k]); // uncolor setheight\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n        array[k++] = right[j++];\r\n    }\r\n    animations.push([1, lo, mid, hi]) // uncolor boundaries\r\n}","const SORT_SPEED = 3;\r\n\r\nexport function getQuickSort(array) {\r\n    // console.log(this.state.array);\r\n    const animations = getQuickSortAnimations(array);\r\n    // console.log(this.state.array);\r\n    // console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [k, bar1, bar2] = animations[i];\r\n        const bar1style = arrayBars[bar1].style;\r\n        const bar2style = arrayBars[bar2].style;\r\n        // const setMode = k % 3;\r\n        if (k === 0) {\r\n            //color swapped\r\n            setTimeout(() => {\r\n                bar1style.backgroundColor = 'blue';\r\n                bar2style.backgroundColor = 'blue';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 1) {\r\n            // swap heights\r\n            setTimeout(() => {\r\n                [bar1style.height, bar2style.height] = [bar2style.height, bar1style.height];\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 2) {\r\n            // recolor swapped\r\n            setTimeout(() => {\r\n                bar1style.backgroundColor = 'grey';\r\n                bar2style.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 3) {\r\n            // color pivot and compare\r\n            setTimeout(() => {\r\n                bar1style.backgroundColor = 'red';\r\n                bar2style.backgroundColor = 'yellow';\r\n            }, i * SORT_SPEED)\r\n        } else if (k === 4) {\r\n            // recolor pivot\r\n            setTimeout(() => {\r\n                bar1style.backgroundColor = 'grey';\r\n                bar2style.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // const auxiliaryArray = array.slice();\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations,\r\n) {\r\n    if (lo >= hi) return;\r\n\r\n    let pi = quickSortPartition(array, lo, hi, animations);\r\n    quickSortHelper(array, lo, pi - 1, animations);\r\n    quickSortHelper(array, pi + 1, hi, animations);\r\n}\r\n\r\nfunction quickSortPartition(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations\r\n) {\r\n    let pivot = array[hi];\r\n    let i = lo;\r\n    for (let j = lo; j < hi; j++) {\r\n        if (array[j] < pivot) {\r\n            animations.push([3, j, hi]); // color pivot and jth element\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            animations.push([0, i, j]); // color elements to swap\r\n            animations.push([1, i, j]); // swap heights\r\n            animations.push([2, i, j]); // recolor swapped elements \r\n            i++;\r\n        }\r\n    }\r\n    animations.push([4, lo, hi]); // recolor pivot\r\n    [array[i], array[hi]] = [array[hi], array[i]];\r\n    animations.push([0, i, hi]);\r\n    animations.push([1, i, hi]);\r\n    animations.push([2, i, hi]);\r\n    return i;\r\n}","const SORT_SPEED = 3;\r\n\r\nexport function getBubbleSort(array) {\r\n    const animations = getBubbleSortAnimations(array);\r\n    // console.log(this.state.array);\r\n    // console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [k, idx] = animations[i];\r\n        const bar1 = arrayBars[idx].style;\r\n        const bar2 = arrayBars[idx + 1].style;\r\n\r\n        if (k === 0) {\r\n            // comparision color\r\n            setTimeout(() => {\r\n                bar1.backgroundColor = 'yellow';\r\n                bar2.backgroundColor = 'yellow';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 1) {\r\n            // recolor\r\n            setTimeout(() => {\r\n                bar1.backgroundColor = 'grey';\r\n                bar2.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 2) {\r\n            // swap color\r\n            setTimeout(() => {\r\n                bar1.backgroundColor = 'blue';\r\n                bar2.backgroundColor = 'blue';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 3) {\r\n            // swap heights\r\n            setTimeout(() => {\r\n                [bar1.height, bar2.height] = [bar2.height, bar1.height];\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 4) {\r\n            // swap recolor\r\n            setTimeout(() => {\r\n                bar1.backgroundColor = 'grey';\r\n                bar2.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nfunction getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // const auxiliaryArray = array.slice();\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(\r\n    array,\r\n    animations,\r\n) {\r\n    const n = array.length;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        let j = 0;\r\n        for (j = 0; j < n - i - 1; j++) {\r\n            if (array[j] <= array[j + 1]) {\r\n                // comparision coloring\r\n                animations.push([0, j]); // color\r\n                animations.push([1, j]); // recolor\r\n            } else {\r\n                animations.push([0, j]); // color\r\n                animations.push([2, j]); // swap color\r\n                animations.push([3, j]); // swap action\r\n                animations.push([4, j]); // swap recolor\r\n                animations.push([1, j]); // recolor\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Clement's Method\r\n// function bubbleSortHelper (mainArray, animations){\r\n//     const n = mainArray.length;\r\n\r\n//     let sorted = false;\r\n//     while (!sorted){\r\n//         sorted = true;\r\n//         // let max = n-2;\r\n//         for (let i = 0; i < n-1; i++){\r\n//             // console.log(mainArray[i], mainArray[i+1]);\r\n//             if(mainArray[i] > mainArray[i+1]){\r\n//                 sorted = false;\r\n//                 animations.push([i, i+1]);\r\n//                 animations.push([i, i+1]);\r\n//                 animations.push([i, mainArray[i], i+1, mainArray[i+1]]);\r\n//                 const temp = mainArray[i];\r\n//                 mainArray[i] = mainArray[i+1];\r\n//                 mainArray[i+1] = temp;\r\n//                 // console.log(mainArray[i], mainArray[i+1], temp);\r\n//             }\r\n//         }\r\n//     }\r\n// }","const SORT_SPEED = 3;\r\n\r\nexport function getInsertionSort(array) {\r\n    // console.log(array);\r\n    const animations = getInsertionSortAnimations(array);\r\n    // console.log(array);\r\n    // console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [k, bar] = animations[i];\r\n        if (k === 0){\r\n            // color key\r\n            setTimeout(() => {\r\n                arrayBars[bar].style.backgroundColor = 'red';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 1){\r\n            // uncolor key\r\n            setTimeout(() => {\r\n                arrayBars[bar].style.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 2){\r\n            // color comparision with key\r\n            setTimeout(() => {\r\n                arrayBars[bar].style.backgroundColor = 'yellow';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 3){\r\n            // color swap\r\n            setTimeout(() => {\r\n                arrayBars[bar].style.backgroundColor = 'blue';\r\n                arrayBars[bar+1].style.backgroundColor = 'blue';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 4){\r\n            // swap height\r\n            setTimeout(() => {\r\n                [arrayBars[bar].style.height, arrayBars[bar+1].style.height] = [arrayBars[bar+1].style.height, arrayBars[bar].style.height];\r\n                arrayBars[bar].style.backgroundColor = 'blue';\r\n                arrayBars[bar+1].style.backgroundColor = 'blue';\r\n            }, i * SORT_SPEED);\r\n        } else if (k === 5){\r\n            // color swap\r\n            setTimeout(() => {\r\n                arrayBars[bar].style.backgroundColor = 'grey';\r\n                arrayBars[bar+1].style.backgroundColor = 'grey';\r\n            }, i * SORT_SPEED);\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nfunction getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    insertionSort(array, 0, array.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction insertionSort(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations,\r\n) {\r\n    let i, j, key;\r\n    for (i = 1; i <= hi; i++){\r\n        key = array[i];\r\n        animations.push([0, i]) // color key\r\n        j = i-1;\r\n        while (j >= 0 && array[j] > key){\r\n            array[j+1] = array[j];\r\n            animations.push([2, j]); // color comparision\r\n            animations.push([3, j]); // color swap\r\n            animations.push([4, j]); // swap height\r\n            animations.push([5, j]); // uncolor swap\r\n            animations.push([0, i]); // color key\r\n            j--;\r\n        }\r\n        array[j+1] = key;\r\n        // color element and key swap\r\n        animations.push([1, i]); // uncolor key\r\n    }\r\n}\r\n\r\n// select key\r\n// find all elements greater than key\r\n// move them to the right\r\n// move key to the appropriate place","const SORT_SPEED = 3;\r\n\r\nexport function getSelectionSort(array) {\r\n  //   console.log(array);\r\n  const animations = getSelectionSortAnimations(array);\r\n  // console.log(animations);\r\n  //   console.log(array);\r\n\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const [k, left, right] = animations[i];\r\n    if (k === 0){\r\n      // color leftmost element\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'red';\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 1){\r\n      // color element searching\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'cyan';\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 2){\r\n      // uncolor element searching\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'grey';\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 3){\r\n      // color min value element and uncolor previous min value element\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'red';\r\n        arrayBars[right].style.backgroundColor = 'grey';\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 4){\r\n      // animate the swap\r\n      setTimeout(() => {\r\n        [arrayBars[left].style.height, arrayBars[right].style.height] = [arrayBars[right].style.height, arrayBars[left].style.height];\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 5){\r\n      // color the swap\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'yellow';\r\n        arrayBars[right].style.backgroundColor = 'yellow';\r\n      }, i * SORT_SPEED);\r\n    } else if (k === 6){\r\n      // uncolor the swap\r\n      setTimeout(() => {\r\n        arrayBars[left].style.backgroundColor = 'grey';\r\n        arrayBars[right].style.backgroundColor = 'grey';\r\n      }, i * SORT_SPEED);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  selectionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    let minIdx = i;\r\n    animations.push([0, minIdx, 0]);\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([1,j,0]);\r\n      if (array[j] <= array[minIdx]) {\r\n        animations.push([3, j, minIdx]);\r\n        minIdx = j;\r\n        continue;\r\n      }\r\n      animations.push([2, j, 0]);\r\n    }\r\n    [array[i], array[minIdx]] = [array[minIdx], array[i]];\r\n    // animate the swap\r\n    // uncolor the minidx element\r\n    animations.push([5, i, minIdx]);\r\n    animations.push([4, i, minIdx]);\r\n    animations.push([6, i, minIdx]);\r\n  }\r\n}\r\n// function selectionSortHelper(array, animations) {\r\n//   for (let i = 0; i < array.length; i++) {\r\n//     let minIdx = i;\r\n//     // color min index element\r\n//     animations.push([0, i, null]);\r\n//     for (let j = i + 1; j < array.length; j++) {\r\n//       // color comparision bw min idx elements\r\n//       animations.push([1, j, i]);\r\n//       if (array[j] < array[minIdx]) {\r\n//         animations.push([4, j, minIdx]); // j red minidx grey\r\n//         minIdx = j;\r\n//       }\r\n//       // uncolor j, color minidx\r\n//       animations.push([3, j, minIdx]);\r\n//     }\r\n//     [array[i], array[minIdx]] = [array[minIdx], array[i]];\r\n//     // color swap\r\n//     // animations.push([4, i, minIdx]);\r\n//     // swap height\r\n//     // animations.push([5, i, minIdx]);\r\n//     // uncolor swap\r\n//     // animations.push([6, i, minIdx]);\r\n//     // uncolor min idx element\r\n//     animations.push([2, i, null]);\r\n//   }\r\n// }\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n// import {getMergeSortAnimations, getBubbleSortAnimations, getQuickSortAnimations} from '../SortingAlgorithms/SortingAlogrithms';\r\n// import { getMergeSortAnimationsOld } from '../SortingAlgorithms/mergeSortOld';\r\nimport { getMergeSort } from \"../SortingAlgorithms/mergeSort\";\r\nimport { getQuickSort } from \"../SortingAlgorithms/quickSort\";\r\nimport { getBubbleSort } from \"../SortingAlgorithms/bubbleSort\";\r\nimport { getInsertionSort } from \"../SortingAlgorithms/insertionSort\";\r\nimport { getSelectionSort } from \"../SortingAlgorithms/selectionSort\";\r\n// import { array } from 'prop-types';\r\n\r\nconst ARRAY_SIZE = 150;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < ARRAY_SIZE; i++) {\r\n      array.push(randomNumberBetween(10, 500));\r\n    }\r\n    // console.log(this.state.array);\r\n    this.setState({ array });\r\n    // console.log(this.state.array);\r\n  }\r\n\r\n  selectionSort() {\r\n    getSelectionSort(this.state.array);\r\n  }\r\n\r\n  mergeSort() {\r\n    getMergeSort(this.state.array);\r\n  }\r\n\r\n  // mergeSortOld() {\r\n  //     // console.log(this.state.array);\r\n  //     const animations = getMergeSortAnimationsOld(this.state.array);\r\n  //     console.log(this.state.array);\r\n  //     console.log(animations);\r\n\r\n  //     for (let i = 0; i < animations.length; i++){\r\n  //         const arrayBars = document.getElementsByClassName('array-bar');\r\n  //         const isColorChange = i % 3 !== 2;\r\n  //         if (isColorChange){\r\n  //             const [barOne, barTwo] = animations[i];\r\n  //             const barOneStyle = arrayBars[barOne].style;\r\n  //             const barTwoStyle = arrayBars[barTwo].style;\r\n  //             const color = i % 3 === 0 ? 'red' : 'grey';\r\n  //             setTimeout(() => {\r\n  //                 barOneStyle.backgroundColor = color;\r\n  //                 barTwoStyle.backgroundColor = color;\r\n  //             }, i * SORTING_SPEED);\r\n  //         } else {\r\n  //             setTimeout(() => {\r\n  //                 const [barOne, newHeight] = animations[i];\r\n  //                 const barOneStyle = arrayBars[barOne].style;\r\n  //                 barOneStyle.height = `${newHeight}px`;\r\n  //             }, i * SORTING_SPEED);\r\n  //         }\r\n  //     }\r\n\r\n  //     // console.log(this.state.array);\r\n  // }\r\n\r\n  quickSort() {\r\n    getQuickSort(this.state.array);\r\n  }\r\n\r\n  heapSort() {\r\n\r\n  }\r\n\r\n  bubbleSort() {\r\n    getBubbleSort(this.state.array);\r\n  }\r\n\r\n  insertionSort() {\r\n    getInsertionSort(this.state.array);\r\n  }\r\n\r\n  // bubbleSortOld() {\r\n  //     // console.log(this.state.array);\r\n  //     const animations = getBubbleSortAnimations(this.state.array);\r\n  //     // console.log(this.state.array);\r\n  //     // console.log(animations);\r\n\r\n  //     // let lastindex = animations.length-1;\r\n  //     for (let i = 0; i < animations.length; i++){\r\n  //         const arrayBars = document.getElementsByClassName('array-bar');\r\n  //         const isColorChange = i % 3  !== 2;\r\n  //         if (isColorChange){\r\n  //             const [barOne, barTwo] = animations[i];\r\n  //             const barOneStyle = arrayBars[barOne].style;\r\n  //             const barTwoStyle = arrayBars[barTwo].style;\r\n  //             const color = i % 3 === 0 ? 'red' : 'grey';\r\n  //             // const color = 'red';\r\n  //             setTimeout(() => {\r\n  //                 barOneStyle.backgroundColor = color;\r\n  //                 barTwoStyle.backgroundColor = color;\r\n  //             }, i * 3);\r\n  //         } else {\r\n  //             setTimeout(() => {\r\n  //                 const [bar1, height1, bar2, height2] = animations[i];\r\n  //                 const barOneStyle = arrayBars[bar1].style;\r\n  //                 barOneStyle.height = `${height2}px`;\r\n  //                 // barOneStyle.backgroundColor = 'blue';\r\n  //                 const barTwoStyle = arrayBars[bar2].style;\r\n  //                 barTwoStyle.height = `${height1}px`;\r\n  //                 // barTwoStyle.backgroundColor = 'blue';\r\n  //             }, i * 3);\r\n  //         }\r\n  //     }\r\n\r\n  // }\r\n\r\n  // testSortingAlgorithms() {\r\n  //     for (let i = 0; i < 100; i++){\r\n  //         const array = [];\r\n  //         const length = randomNumberBetween(1, 1000);\r\n  //         for (let j = 0; j < length; j++){\r\n  //             array.push(randomNumberBetween(0, 1000));\r\n  //         }\r\n  //         const jsSortedArray = array.slice().sort((a,b) => a - b);\r\n  //         const sortedArray = SortingAlgorithms.mergeSort(array);\r\n  //         console.log(arrayEqual(sortedArray, jsSortedArray));\r\n  //     }\r\n  // }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"button-container\">\r\n          <button className=\"button\" onClick={() => this.resetArray()}>\r\n            Generate New Array\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.mergeSort()}>\r\n            Merge Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.quickSort()}>\r\n            Quick Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.bubbleSort()}>\r\n            Bubble Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.insertionSort()}>\r\n            Insertion Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.selectionSort()}>\r\n            Selection Sort\r\n          </button>\r\n          {/* <button className=\"button\" onClick={() => this.heapSort()}>\r\n            Heap Sort 'not implemented yet'\r\n          </button> */}\r\n          {/* <button className=\"button\" onClick={() => this.testSortingAlgorithms()}>Test Sorting Algorithm</button> */}\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                height: `${value}px`,\r\n                backgroundColor: \"grey\",\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomNumberBetween(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arrayEqual(array, jsarray){\r\n//     if (array.length !== jsarray.length) return false;\r\n//     for (let i = 0; i < array.length; i++){\r\n//         if (array[i] !== jsarray[i]) return false;\r\n//     }\r\n//     return true;\r\n// }\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}