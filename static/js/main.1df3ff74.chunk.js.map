{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","mergeSortHelper","lo","hi","mid","Math","floor","len1","len2","push","left","right","i","j","k","merge","getQuickSortAnimations","quickSortHelper","pi","pivot","quickSortPartition","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","console","log","arrayBars","document","getElementsByClassName","l","lobar","midbar","hibar","setTimeout","style","backgroundColor","bar","height","bar1","bar2","bar1style","bar2style","n","bubbleSortHelper","getBubbleSortAnimations","idx","className","onClick","mergeSort","mergeSortOld","quickSort","heapSort","bubbleSort","map","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1df3ff74.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    mergeSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations,\r\n) {\r\n    if (lo >= hi) return;\r\n    const mid = Math.floor((lo + hi) / 2);\r\n    mergeSortHelper(array, lo, mid, animations);\r\n    mergeSortHelper(array, mid + 1, hi, animations);\r\n    merge(array, lo, mid, hi, animations);\r\n}\r\n\r\n// my implementation\r\nfunction merge(\r\n    array,\r\n    lo,\r\n    mid,\r\n    hi,\r\n    animations,\r\n) {\r\n    let len1 = mid + 1 - lo, len2 = hi - mid;\r\n    animations.push([0, lo, mid, hi]) // color boundaries\r\n    const left = [], right = [];\r\n    for (let i = 0; i < len1; i++) {\r\n        left.push(array[lo + i]);\r\n        animations.push([0, lo + i]); // color reading elements\r\n        animations.push([1, lo + i]); // uncolor reading elements\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n    }\r\n    for (let j = 0; j < len2; j++) {\r\n        right.push(array[mid + 1 + j]);\r\n        animations.push([0, mid + 1 + j]); // color reading elements\r\n        animations.push([1, mid + 1 + j]); // uncolor reading elements\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n    }\r\n    let i = 0, j = 0, k = lo;\r\n    while (i < len1 && j < len2) {\r\n        if (left[i] <= right[j]) {\r\n            animations.push([3, k]); // color setheight\r\n            animations.push([2, k, left[i]]); // setheight\r\n            animations.push([4, k]); // uncolor setheight\r\n            animations.push([0, lo, mid, hi]) // color boundaries\r\n            array[k++] = left[i++];\r\n        } else {\r\n            animations.push([3, k]); // color setheight\r\n            animations.push([2, k, right[j]]); // setheight\r\n            animations.push([4, k]); // uncolor setheight\r\n            animations.push([0, lo, mid, hi]) // color boundaries\r\n            array[k++] = right[j++];\r\n        }\r\n    }\r\n    while (i < len1) {\r\n        animations.push([3, k]); // color setheight\r\n        animations.push([2, k, left[i]]); // setheight\r\n        animations.push([4, k]); // uncolor setheight\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n        array[k++] = left[i++];\r\n    }\r\n    while (j < len2) {\r\n        animations.push([3, k]); // color setheight\r\n        animations.push([2, k, right[j]]); // setheight\r\n        animations.push([4, k]); // uncolor setheight\r\n        animations.push([0, lo, mid, hi]) // color boundaries\r\n        array[k++] = right[j++];\r\n    }\r\n    animations.push([1, lo, mid, hi]) // uncolor boundaries\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // const auxiliaryArray = array.slice();\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations,\r\n) {\r\n    if (lo >= hi) return;\r\n\r\n    let pi = quickSortPartition(array, lo, hi, animations);\r\n    quickSortHelper(array, lo, pi - 1, animations);\r\n    quickSortHelper(array, pi + 1, hi, animations);\r\n}\r\n\r\nfunction quickSortPartition(\r\n    array,\r\n    lo,\r\n    hi,\r\n    animations\r\n) {\r\n    let pivot = array[hi];\r\n    let i = lo;\r\n    for (let j = lo; j < hi; j++) {\r\n        if (array[j] < pivot) {\r\n            animations.push([3, j, hi]); // color pivot and jth element\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            animations.push([0, i, j]); // color elements to swap\r\n            animations.push([1, i, j]); // swap heights\r\n            animations.push([2, i, j, lo]); // recolor swapped elements\r\n            i++;\r\n        }\r\n    }\r\n    animations.push([4, lo, hi]); // recolor pivot\r\n    [array[i], array[hi]] = [array[hi], array[i]];\r\n    animations.push([0, i, hi]);\r\n    animations.push([1, i, hi]);\r\n    animations.push([2, i, hi]);\r\n    return i;\r\n}","import React from 'react'\r\nimport './SortingVisualizer.css';\r\n// import {getMergeSortAnimations, getBubbleSortAnimations, getQuickSortAnimations} from '../SortingAlgorithms/SortingAlogrithms';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/mergeSort';\r\n// import { getMergeSortAnimationsOld } from '../SortingAlgorithms/mergeSortOld';\r\nimport { getQuickSortAnimations } from '../SortingAlgorithms/quickSort';\r\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/bubbleSort';\r\n// import { array } from 'prop-types';\r\n\r\n\r\nconst ARRAY_SIZE = 150;\r\nconst SORTING_SPEED = 3;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < ARRAY_SIZE; i++){\r\n            array.push(randomNumberBetween(10,500));\r\n        }\r\n        // console.log(this.state.array);\r\n        this.setState({array});\r\n        // console.log(this.state.array);\r\n    }\r\n\r\n    mergeSort() {\r\n        // console.log(this.state.array);\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        // console.log(this.state.array);\r\n        console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            let l = animations[i].length;\r\n            if (l === 4){\r\n                // color boundaries\r\n                const [k, lobar, midbar, hibar] = animations[i];\r\n                if (k === 0){\r\n                    // console.log('coloring');\r\n                    setTimeout(() => {\r\n                        arrayBars[lobar].style.backgroundColor = 'red';\r\n                        arrayBars[hibar].style.backgroundColor = 'red';\r\n                        arrayBars[midbar].style.backgroundColor = 'blue';\r\n                    }, i * SORTING_SPEED);\r\n                } else if (k === 1) {\r\n                    // console.log('uncoloring');\r\n                    setTimeout(() => {\r\n                        arrayBars[lobar].style.backgroundColor = 'grey';\r\n                        arrayBars[hibar].style.backgroundColor = 'grey';\r\n                        arrayBars[midbar].style.backgroundColor = 'grey';\r\n                    }, i * SORTING_SPEED);\r\n                }\r\n            } else if (l === 3){\r\n                // set bar height\r\n                const [k, bar, height] = animations[i];\r\n                if (k === 2){\r\n                    setTimeout(() => {\r\n                        arrayBars[bar].style.height = `${height}px`;\r\n                    }, i * SORTING_SPEED);\r\n                }\r\n            } else {\r\n                // set bar color\r\n                const [k, bar] = animations[i];\r\n                if (k === 0){\r\n                    setTimeout(() => {\r\n                        arrayBars[bar].style.backgroundColor = 'yellow';\r\n                    }, i * SORTING_SPEED);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        arrayBars[bar].style.backgroundColor = 'grey';\r\n                    }, i * SORTING_SPEED);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // mergeSortOld() {\r\n    //     // console.log(this.state.array);\r\n    //     const animations = getMergeSortAnimationsOld(this.state.array);\r\n    //     console.log(this.state.array);\r\n    //     console.log(animations);\r\n\r\n    //     for (let i = 0; i < animations.length; i++){\r\n    //         const arrayBars = document.getElementsByClassName('array-bar');\r\n    //         const isColorChange = i % 3 !== 2;\r\n    //         if (isColorChange){\r\n    //             const [barOne, barTwo] = animations[i];\r\n    //             const barOneStyle = arrayBars[barOne].style;\r\n    //             const barTwoStyle = arrayBars[barTwo].style;\r\n    //             const color = i % 3 === 0 ? 'red' : 'grey';\r\n    //             setTimeout(() => {\r\n    //                 barOneStyle.backgroundColor = color;\r\n    //                 barTwoStyle.backgroundColor = color;\r\n    //             }, i * SORTING_SPEED);\r\n    //         } else {\r\n    //             setTimeout(() => {\r\n    //                 const [barOne, newHeight] = animations[i];\r\n    //                 const barOneStyle = arrayBars[barOne].style;\r\n    //                 barOneStyle.height = `${newHeight}px`;\r\n    //             }, i * SORTING_SPEED);\r\n    //         }\r\n    //     }\r\n        \r\n    //     // console.log(this.state.array);\r\n    // }\r\n\r\n    quickSort() {\r\n        // console.log(this.state.array);\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        // console.log(this.state.array);\r\n        // console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [k, bar1, bar2] = animations[i];\r\n            const bar1style = arrayBars[bar1].style;\r\n            const bar2style = arrayBars[bar2].style;\r\n            // const setMode = k % 3;\r\n            if (k === 0){\r\n                //color swapped\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = 'blue';\r\n                    bar2style.backgroundColor = 'blue';\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 1){\r\n                // swap heights\r\n                setTimeout(() => {\r\n                    [bar1style.height, bar2style.height] = [bar2style.height, bar1style.height];\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 2){        \r\n                // recolor swapped\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = 'grey';\r\n                    bar2style.backgroundColor = 'grey';\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 3){\r\n                // color pivot and compare\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = 'red';\r\n                    bar2style.backgroundColor = 'yellow';\r\n                }, i * SORTING_SPEED)\r\n            } else if (k === 4){\r\n                // recolor pivot\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = 'grey';\r\n                    bar2style.backgroundColor = 'grey';\r\n                }, i * SORTING_SPEED);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n\r\n    }\r\n\r\n    bubbleSort(){\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        // console.log(this.state.array);\r\n        // console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [k, idx] = animations[i];\r\n            const bar1 = arrayBars[idx].style;\r\n            const bar2 = arrayBars[idx+1].style;\r\n\r\n            if (k === 0) {\r\n                // comparision color\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = 'yellow';\r\n                    bar2.backgroundColor = 'yellow';\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 1) {\r\n                // recolor\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = 'grey';\r\n                    bar2.backgroundColor = 'grey';\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 2){\r\n                // swap color\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = 'blue';\r\n                    bar2.backgroundColor = 'blue';\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 3) {\r\n                // swap heights\r\n                setTimeout(() => {\r\n                    [bar1.height, bar2.height] = [bar2.height, bar1.height];\r\n                }, i * SORTING_SPEED);\r\n            } else if (k === 4){\r\n                // swap recolor\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = 'grey';\r\n                    bar2.backgroundColor = 'grey';\r\n                }, i * SORTING_SPEED);\r\n            }\r\n        }\r\n    }\r\n\r\n    // bubbleSortOld() {\r\n    //     // console.log(this.state.array);\r\n    //     const animations = getBubbleSortAnimations(this.state.array);\r\n    //     // console.log(this.state.array);\r\n    //     // console.log(animations);\r\n\r\n    //     // let lastindex = animations.length-1;\r\n    //     for (let i = 0; i < animations.length; i++){\r\n    //         const arrayBars = document.getElementsByClassName('array-bar');\r\n    //         const isColorChange = i % 3  !== 2;\r\n    //         if (isColorChange){\r\n    //             const [barOne, barTwo] = animations[i];\r\n    //             const barOneStyle = arrayBars[barOne].style;\r\n    //             const barTwoStyle = arrayBars[barTwo].style;\r\n    //             const color = i % 3 === 0 ? 'red' : 'grey';\r\n    //             // const color = 'red';\r\n    //             setTimeout(() => {\r\n    //                 barOneStyle.backgroundColor = color;\r\n    //                 barTwoStyle.backgroundColor = color;\r\n    //             }, i * 3);\r\n    //         } else {\r\n    //             setTimeout(() => {\r\n    //                 const [bar1, height1, bar2, height2] = animations[i];\r\n    //                 const barOneStyle = arrayBars[bar1].style;\r\n    //                 barOneStyle.height = `${height2}px`;\r\n    //                 // barOneStyle.backgroundColor = 'blue';\r\n    //                 const barTwoStyle = arrayBars[bar2].style;\r\n    //                 barTwoStyle.height = `${height1}px`;\r\n    //                 // barTwoStyle.backgroundColor = 'blue';\r\n    //             }, i * 3);\r\n    //         }\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // testSortingAlgorithms() {\r\n    //     for (let i = 0; i < 100; i++){\r\n    //         const array = [];\r\n    //         const length = randomNumberBetween(1, 1000);\r\n    //         for (let j = 0; j < length; j++){\r\n    //             array.push(randomNumberBetween(0, 1000));\r\n    //         }\r\n    //         const jsSortedArray = array.slice().sort((a,b) => a - b);\r\n    //         const sortedArray = SortingAlgorithms.mergeSort(array);\r\n    //         console.log(arrayEqual(sortedArray, jsSortedArray));\r\n    //     }\r\n    // }\r\n\r\n    render () {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">            \r\n                \r\n                <div className=\"button-container\">\r\n                    <button className=\"button\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className=\"button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"button\" onClick={() => this.mergeSortOld()}>Merge Sort Old</button>\r\n                    <button className=\"button\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button className=\"button\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button className=\"button\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    {/* <button className=\"button\" onClick={() => this.testSortingAlgorithms()}>Test Sorting Algorithm</button> */}\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div \r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                height: `${value}px`,\r\n                                backgroundColor: 'grey',\r\n                        }}>\r\n                            \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomNumberBetween(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arrayEqual(array, jsarray){\r\n//     if (array.length !== jsarray.length) return false;\r\n//     for (let i = 0; i < array.length; i++){\r\n//         if (array[i] !== jsarray[i]) return false;\r\n//     }\r\n//     return true;\r\n// }\r\n\r\n\r\n","export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // const auxiliaryArray = array.slice();\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(\r\n    array,\r\n    animations,\r\n) {\r\n    const n = array.length;\r\n\r\n    for (let i = 0; i < n; i++){\r\n        let j = 0;\r\n        for (j = 0; j < n-i-1; j++){\r\n            if (array[j] <= array[j+1]){\r\n                // comparision coloring\r\n                animations.push([0, j]); // color\r\n                animations.push([1, j]); // recolor\r\n            } else {\r\n                animations.push([0, j]); // color\r\n                animations.push([2, j]); // swap color\r\n                animations.push([3, j]); // swap action\r\n                animations.push([4, j]); // swap recolor\r\n                animations.push([1, j]); // recolor\r\n                [array[j], array[j+1]] = [array[j+1], array[j]];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Clement's Method\r\n// function bubbleSortHelper (mainArray, animations){\r\n//     const n = mainArray.length;\r\n    \r\n//     let sorted = false;\r\n//     while (!sorted){\r\n//         sorted = true;\r\n//         // let max = n-2;\r\n//         for (let i = 0; i < n-1; i++){\r\n//             // console.log(mainArray[i], mainArray[i+1]);\r\n//             if(mainArray[i] > mainArray[i+1]){\r\n//                 sorted = false;\r\n//                 animations.push([i, i+1]);\r\n//                 animations.push([i, i+1]);\r\n//                 animations.push([i, mainArray[i], i+1, mainArray[i+1]]);\r\n//                 const temp = mainArray[i];\r\n//                 mainArray[i] = mainArray[i+1];\r\n//                 mainArray[i+1] = temp;\r\n//                 // console.log(mainArray[i], mainArray[i+1], temp);\r\n//             }\r\n//         }\r\n//     }\r\n// }","// import logo from './logo.svg';\nimport './App.css';\n// import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}